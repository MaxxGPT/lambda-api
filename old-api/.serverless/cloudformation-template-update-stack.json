{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "ListArticlesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-listArticles"
      }
    },
    "ShowArticleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-showArticle"
      }
    },
    "ListSourcesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-listSources"
      }
    },
    "ShowSourceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-showSource"
      }
    },
    "UpdateSourceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-updateSource"
      }
    },
    "CreateSourceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-createSource"
      }
    },
    "RemoveSourceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-removeSource"
      }
    },
    "ListSubscriptionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-listSubscriptions"
      }
    },
    "CreateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-createUser"
      }
    },
    "ChangePasswordLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-changePassword"
      }
    },
    "UserMeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-userMe"
      }
    },
    "GetApiKeyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-getApiKey"
      }
    },
    "GetUsageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-getUsage"
      }
    },
    "RemoveUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-removeUsers"
      }
    },
    "UpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-updateUser"
      }
    },
    "UpdateUserPasswordLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-updateUserPassword"
      }
    },
    "UserRegisterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-userRegister"
      }
    },
    "UserLoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-userLogin"
      }
    },
    "CustomAuthorizerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-customAuthorizer"
      }
    },
    "CognitoUnderscorepostUnderscoreconfirmationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-cognito_post_confirmation"
      }
    },
    "UpdateRequestsPerCycleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lambda-api-service-dev-updateRequestsPerCycle"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "aws-lambda-api-service",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-api-service-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-api-service-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "aws-lambda-api-service",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "ListArticlesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/articles_handler.list",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-listArticles",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "ListArticlesLogGroup"
      ]
    },
    "ShowArticleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/articles_handler.show",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-showArticle",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "ShowArticleLogGroup"
      ]
    },
    "ListSourcesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/sources_handler.list",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-listSources",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "ListSourcesLogGroup"
      ]
    },
    "ShowSourceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/sources_handler.show",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-showSource",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "ShowSourceLogGroup"
      ]
    },
    "UpdateSourceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/sources_handler.update",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-updateSource",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "UpdateSourceLogGroup"
      ]
    },
    "CreateSourceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/sources_handler.create",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-createSource",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "CreateSourceLogGroup"
      ]
    },
    "RemoveSourceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/sources_handler.remove",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-removeSource",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "RemoveSourceLogGroup"
      ]
    },
    "ListSubscriptionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/subscriptions_handler.list",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-listSubscriptions",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "ListSubscriptionsLogGroup"
      ]
    },
    "CreateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/users_handler.create",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-createUser",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "CreateUserLogGroup"
      ]
    },
    "ChangePasswordLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/users_handler.recover_password",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-changePassword",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "ChangePasswordLogGroup"
      ]
    },
    "UserMeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/users_handler.me",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-userMe",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "UserMeLogGroup"
      ]
    },
    "GetApiKeyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/users_handler.get_api_key",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-getApiKey",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "GetApiKeyLogGroup"
      ]
    },
    "GetUsageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/users_handler.get_usage",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-getUsage",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "GetUsageLogGroup"
      ]
    },
    "RemoveUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/users_handler.remove",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-removeUsers",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "RemoveUsersLogGroup"
      ]
    },
    "UpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/users_handler.update",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-updateUser",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "UpdateUserLogGroup"
      ]
    },
    "UpdateUserPasswordLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/users_handler.change_password",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-updateUserPassword",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "UpdateUserPasswordLogGroup"
      ]
    },
    "UserRegisterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/users_handler.register",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-userRegister",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "UserRegisterLogGroup"
      ]
    },
    "UserLoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/users_handler.login",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-userLogin",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "UserLoginLogGroup"
      ]
    },
    "CustomAuthorizerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/authorizer_handler.authorize",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-customAuthorizer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "CustomAuthorizerLogGroup"
      ]
    },
    "CognitoUnderscorepostUnderscoreconfirmationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/users_handler.post_confirmation",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-cognito_post_confirmation",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "CognitoUnderscorepostUnderscoreconfirmationLogGroup"
      ]
    },
    "UpdateRequestsPerCycleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lambda-api-service/dev/1678099020511-2023-03-06T10:37:00.511Z/aws-lambda-api-service.zip"
        },
        "Handler": "handlers/subscriptions_handler.updateRequestsPerCycle",
        "Runtime": "nodejs14.x",
        "FunctionName": "aws-lambda-api-service-dev-updateRequestsPerCycle",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "MONGODB_ATLAS_CLUSTER_URI": "mongodb+srv://Prod-API-User:zF0eKdkgCPM7I19I@mongodb-prod.zzl18.mongodb.net/NewsAPI",
            "JWT_ACCOUNT_ACTIVATION": "CannabisNewsAPIJWTAccountActivation1029384857",
            "COGNITO_USER_POOL": "us-east-1_I3DKecNsh",
            "COGNITO_USER_CLIENT": "3bkhbfcs6u467f4q9ln4mcob40",
            "COGNITO_REGION": "us-east-1",
            "COGNITO_USER_POOL_NAME": "cannabis_news_api_users_client",
            "LAMBDA_FUNCTION_NAME": "MongoDB_Atlas_Connection"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-04724e3bcfdfb4efa"
          ],
          "SubnetIds": [
            "subnet-0f39abb3b3e5d8e7e"
          ]
        }
      },
      "DependsOn": [
        "UpdateRequestsPerCycleLogGroup"
      ]
    },
    "ListArticlesLambdaVersionBHvWg3OIdWYGDVUYojC3H8daohIDjpgXGlhsClLphjY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListArticlesLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "ShowArticleLambdaVersion6u8JPFRwWoFUzZQbCT6diM3Zi7ZWnuER08nXoI4yw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ShowArticleLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "ListSourcesLambdaVersionmAyYkEmJbvRxscUpCUGWUrfqTkeCu9eC14Tl9IGm8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListSourcesLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "ShowSourceLambdaVersionpYjb2wqV1hpdP9jJaD26A7KfxYLwetjEl7zRKqwPzE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ShowSourceLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "UpdateSourceLambdaVersionjn1CFWnfoQ5607yZ80OZXG16N2DQLKOhJ5FVHrWF60": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateSourceLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "CreateSourceLambdaVersioniRCes2nAhcOZjh3jEE85aUximWcdvAC4Tn5enOodJo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateSourceLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "RemoveSourceLambdaVersionzXXOZXnEHcNOU9Y4PRJ2Smud2neUxUa5yhk4cdFWA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveSourceLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "ListSubscriptionsLambdaVersionQxRinoE0SsESQaA8CwAz7urolzMtAsf0J60e8uZr8KA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListSubscriptionsLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "CreateUserLambdaVersiontgF4sKJY7epg0xx6FE7ven795Fuyx4pjxYZ6tPQbk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateUserLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "ChangePasswordLambdaVersionNDWLyyFbIYYKWWiEJCWM1X5Wf8JaYM9IK6ISjtmfCQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ChangePasswordLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "UserMeLambdaVersionuDbPg3NYQp9nVI0GDYO2zaHlAemXWYZBqf1346CQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UserMeLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "GetApiKeyLambdaVersionWIu7lDLxEPh5zHLoEFAxlBzjgdNP920lX1cGISTYe0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetApiKeyLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "GetUsageLambdaVersionG2ZJaGJ76E3tWSJRTvkjZ9vuyU1JZIsPFymXh2Kg3og": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUsageLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "RemoveUsersLambdaVersion46jd8eSVLgE2AIrAR4EfOGfueeOxhKref9Ktb62DfM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveUsersLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "UpdateUserLambdaVersion2lPGpaQOBxbNBGRkSUK8fiXKzNsFCx9yMCkTGitI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "UpdateUserPasswordLambdaVersionFQPIhFbypmhTEvZiTo7yuwo4J649HQ8gClyyrQI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserPasswordLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "UserRegisterLambdaVersionWnHHXFbYne9gmjYGIj0wz7F8GrDmaQXUw70fPe4cXcY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UserRegisterLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "UserLoginLambdaVersionzQsg2DNRz573TAoSt7RC9rftf1Yc3ACUwjxhNfE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UserLoginLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "CustomAuthorizerLambdaVersionzJXNqfKm9fcHxlLd73l6cVpOSzBLn4DMVeTjjRH8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CustomAuthorizerLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "CognitoUnderscorepostUnderscoreconfirmationLambdaVersionfhtaqyWxH9rMtAUFhDN3OoViRHSdgMbpasg4AVU2NM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CognitoUnderscorepostUnderscoreconfirmationLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "UpdateRequestsPerCycleLambdaVersionI3TUj0bJj5cvwk8Y0RCIICa3SoubLE2MJL6GjfHfpE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateRequestsPerCycleLambdaFunction"
        },
        "CodeSha256": "8GoSaZuwy8dP7hhfCrW6ExeklVrvCMzX3FKJzl0ElWQ="
      }
    },
    "UpdateRequestsPerCycleEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "UpdateRequestsPerCycleLambdaFunction",
                "Arn"
              ]
            },
            "Id": "updateRequestsPerCycleSchedule"
          }
        ]
      }
    },
    "UpdateRequestsPerCycleLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateRequestsPerCycleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "UpdateRequestsPerCycleEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-aws-lambda-api-service",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceArticles": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "articles",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceArticlesIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceArticles"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSources": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "sources",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSourcesIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSources"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSubscriptions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "subscriptions",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersRecover": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "recover",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersMe": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "me",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersKey": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "key",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersUsage": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "usage",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersPassword": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "password",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersSignin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "signin",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersLogin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "login",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodArticlesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceArticles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodArticlesIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceArticlesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSourcesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSources"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSourcesIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSourcesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSubscriptionsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSubscriptions"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersRecoverOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersRecover"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersMeOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersMe"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersKeyOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersKey"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersUsageOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersUsage"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH,DELETE'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersPasswordOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersPassword"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersSigninOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersSignin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersLoginOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodArticlesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceArticles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListArticlesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "CustomAuthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodArticlesIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceArticlesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ShowArticleLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "CustomAuthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodSourcesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSources"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListSourcesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "CustomAuthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodSourcesIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSourcesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ShowSourceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "CustomAuthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodSourcesIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSourcesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateSourceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateSourceLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSourcesPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSources"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateSourceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateSourceLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSourcesIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSourcesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveSourceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RemoveSourceLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSubscriptionsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSubscriptions"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListSubscriptionsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ListSubscriptionsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersRecoverPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersRecover"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ChangePasswordLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ChangePasswordLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersMeGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersMe"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UserMeLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UserMeLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersKeyGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersKey"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetApiKeyLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetApiKeyLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersUsageGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersUsage"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUsageLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetUsageLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RemoveUsersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersIdVarPatch": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PATCH",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersPasswordPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersPassword"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateUserPasswordLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateUserPasswordLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersSigninPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersSignin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UserRegisterLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UserRegisterLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersLoginPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UserLoginLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UserLoginLambdaPermissionApiGateway"
      ]
    },
    "CustomAuthorizerApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300,
        "IdentitySource": "method.request.querystring.apiKey",
        "Name": "customAuthorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "CustomAuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN"
      }
    },
    "ApiGatewayDeployment1678099013684": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodArticlesOptions",
        "ApiGatewayMethodArticlesIdVarOptions",
        "ApiGatewayMethodSourcesOptions",
        "ApiGatewayMethodSourcesIdVarOptions",
        "ApiGatewayMethodSubscriptionsOptions",
        "ApiGatewayMethodUsersOptions",
        "ApiGatewayMethodUsersRecoverOptions",
        "ApiGatewayMethodUsersMeOptions",
        "ApiGatewayMethodUsersKeyOptions",
        "ApiGatewayMethodUsersUsageOptions",
        "ApiGatewayMethodUsersIdVarOptions",
        "ApiGatewayMethodUsersPasswordOptions",
        "ApiGatewayMethodUsersSigninOptions",
        "ApiGatewayMethodUsersLoginOptions",
        "ApiGatewayMethodArticlesGet",
        "ApiGatewayMethodArticlesIdVarGet",
        "ApiGatewayMethodSourcesGet",
        "ApiGatewayMethodSourcesIdVarGet",
        "ApiGatewayMethodSourcesIdVarPut",
        "ApiGatewayMethodSourcesPost",
        "ApiGatewayMethodSourcesIdVarDelete",
        "ApiGatewayMethodSubscriptionsGet",
        "ApiGatewayMethodUsersPost",
        "ApiGatewayMethodUsersRecoverPost",
        "ApiGatewayMethodUsersMeGet",
        "ApiGatewayMethodUsersKeyGet",
        "ApiGatewayMethodUsersUsageGet",
        "ApiGatewayMethodUsersIdVarDelete",
        "ApiGatewayMethodUsersIdVarPatch",
        "ApiGatewayMethodUsersPasswordPost",
        "ApiGatewayMethodUsersSigninPost",
        "ApiGatewayMethodUsersLoginPost"
      ]
    },
    "ListArticlesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListArticlesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CustomAuthorizerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CustomAuthorizerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ShowArticleLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ShowArticleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListSourcesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListSourcesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ShowSourceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ShowSourceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateSourceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateSourceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateSourceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateSourceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveSourceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveSourceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListSubscriptionsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListSubscriptionsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ChangePasswordLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ChangePasswordLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UserMeLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UserMeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetApiKeyLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetApiKeyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUsageLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUsageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveUsersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateUserPasswordLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserPasswordLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UserRegisterLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UserRegisterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UserLoginLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UserLoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-ServerlessDeploymentBucketName"
      }
    },
    "ListArticlesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListArticlesLambdaVersionBHvWg3OIdWYGDVUYojC3H8daohIDjpgXGlhsClLphjY"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-ListArticlesLambdaFunctionQualifiedArn"
      }
    },
    "ShowArticleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ShowArticleLambdaVersion6u8JPFRwWoFUzZQbCT6diM3Zi7ZWnuER08nXoI4yw"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-ShowArticleLambdaFunctionQualifiedArn"
      }
    },
    "ListSourcesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListSourcesLambdaVersionmAyYkEmJbvRxscUpCUGWUrfqTkeCu9eC14Tl9IGm8"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-ListSourcesLambdaFunctionQualifiedArn"
      }
    },
    "ShowSourceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ShowSourceLambdaVersionpYjb2wqV1hpdP9jJaD26A7KfxYLwetjEl7zRKqwPzE"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-ShowSourceLambdaFunctionQualifiedArn"
      }
    },
    "UpdateSourceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateSourceLambdaVersionjn1CFWnfoQ5607yZ80OZXG16N2DQLKOhJ5FVHrWF60"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-UpdateSourceLambdaFunctionQualifiedArn"
      }
    },
    "CreateSourceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateSourceLambdaVersioniRCes2nAhcOZjh3jEE85aUximWcdvAC4Tn5enOodJo"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-CreateSourceLambdaFunctionQualifiedArn"
      }
    },
    "RemoveSourceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveSourceLambdaVersionzXXOZXnEHcNOU9Y4PRJ2Smud2neUxUa5yhk4cdFWA"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-RemoveSourceLambdaFunctionQualifiedArn"
      }
    },
    "ListSubscriptionsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListSubscriptionsLambdaVersionQxRinoE0SsESQaA8CwAz7urolzMtAsf0J60e8uZr8KA"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-ListSubscriptionsLambdaFunctionQualifiedArn"
      }
    },
    "CreateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateUserLambdaVersiontgF4sKJY7epg0xx6FE7ven795Fuyx4pjxYZ6tPQbk"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-CreateUserLambdaFunctionQualifiedArn"
      }
    },
    "ChangePasswordLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ChangePasswordLambdaVersionNDWLyyFbIYYKWWiEJCWM1X5Wf8JaYM9IK6ISjtmfCQ"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-ChangePasswordLambdaFunctionQualifiedArn"
      }
    },
    "UserMeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UserMeLambdaVersionuDbPg3NYQp9nVI0GDYO2zaHlAemXWYZBqf1346CQ"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-UserMeLambdaFunctionQualifiedArn"
      }
    },
    "GetApiKeyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetApiKeyLambdaVersionWIu7lDLxEPh5zHLoEFAxlBzjgdNP920lX1cGISTYe0"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-GetApiKeyLambdaFunctionQualifiedArn"
      }
    },
    "GetUsageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUsageLambdaVersionG2ZJaGJ76E3tWSJRTvkjZ9vuyU1JZIsPFymXh2Kg3og"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-GetUsageLambdaFunctionQualifiedArn"
      }
    },
    "RemoveUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveUsersLambdaVersion46jd8eSVLgE2AIrAR4EfOGfueeOxhKref9Ktb62DfM"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-RemoveUsersLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserLambdaVersion2lPGpaQOBxbNBGRkSUK8fiXKzNsFCx9yMCkTGitI"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-UpdateUserLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserPasswordLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserPasswordLambdaVersionFQPIhFbypmhTEvZiTo7yuwo4J649HQ8gClyyrQI"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-UpdateUserPasswordLambdaFunctionQualifiedArn"
      }
    },
    "UserRegisterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UserRegisterLambdaVersionWnHHXFbYne9gmjYGIj0wz7F8GrDmaQXUw70fPe4cXcY"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-UserRegisterLambdaFunctionQualifiedArn"
      }
    },
    "UserLoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UserLoginLambdaVersionzQsg2DNRz573TAoSt7RC9rftf1Yc3ACUwjxhNfE"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-UserLoginLambdaFunctionQualifiedArn"
      }
    },
    "CustomAuthorizerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CustomAuthorizerLambdaVersionzJXNqfKm9fcHxlLd73l6cVpOSzBLn4DMVeTjjRH8"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-CustomAuthorizerLambdaFunctionQualifiedArn"
      }
    },
    "CognitoUnderscorepostUnderscoreconfirmationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CognitoUnderscorepostUnderscoreconfirmationLambdaVersionfhtaqyWxH9rMtAUFhDN3OoViRHSdgMbpasg4AVU2NM"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-CognitoUnderscorepostUnderscoreconfirmationLambdaFunctionQualifiedArn"
      }
    },
    "UpdateRequestsPerCycleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateRequestsPerCycleLambdaVersionI3TUj0bJj5cvwk8Y0RCIICa3SoubLE2MJL6GjfHfpE"
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-UpdateRequestsPerCycleLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-aws-lambda-api-service-dev-ServiceEndpoint"
      }
    }
  }
}