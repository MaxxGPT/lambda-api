service: aws-lambda-api-service
#variablesResolutionMode: 20210326
frameworkVersion: '3'
custom:
  customDomain:
  domainName: api.cannabisnewsapi.ai
  certificateName: 'api.cannabisnewsapi.ai'
  endpointType: REGIONAL
  apiType: rest
  basePath: ''
  stage: ${self:provider.stage}
  createRoute53Record: true

package:
  exclude:
    - "aws-lambda-api-service.zip"

provider:
  name: aws
  runtime: nodejs14.x
  #lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  apiGateway:
    disableDefaultEndpoint: true
  vpc:
    securityGroupIds: 
      - sg-04724e3bcfdfb4efa
    subnetIds:
      - subnet-0f39abb3b3e5d8e7e
      
  environment: 
    MONGODB_ATLAS_CLUSTER_URI: ${ssm:MONGODB_ATLAS_CLUSTER_URI}
    JWT_ACCOUNT_ACTIVATION: ${file(./env.yml):${opt:stage}.JWT_ACCOUNT_ACTIVATION}
    COGNITO_USER_POOL: ${file(./env.yml):${opt:stage}.COGNITO_USER_POOL}
    COGNITO_USER_CLIENT: ${file(./env.yml):${opt:stage}.COGNITO_USER_CLIENT}
    COGNITO_REGION: ${file(./env.yml):${opt:stage}.COGNITO_REGION}
    COGNITO_USER_POOL_NAME: ${file(./env.yml):${opt:stage}.COGNITO_USER_POOL_NAME}
    LAMBDA_FUNCTION_NAME: ${file(./env.yml):${opt:stage}.LAMBDA_FUNCTION_NAME}
    CLOUDFLARE_TURNSTILE_KEY: ${ssm:CLOUDFLARE_TURNSTILE_KEY}
    SPECIAL_UPDATE_API_KEY: $file(./env.yml):${opt:stage}.SPECIAL_UPDATE_API_KEY}
    

functions:
  listArticles:
    handler: handlers/articles_handler.list
    timeout: 30
    events:
      - http:
          path: articles
          method: get
          cors: true
          authorizer: 
            name: customAuthorizer
            identitySource: method.request.header.apiKey
  showArticle:
    handler: handlers/articles_handler.show
    timeout: 30
    events:
      - http:
          path: articles/{id}
          method: get
          cors: true
          authorizer: 
            name: customAuthorizer
            identitySource: method.request.header.apiKey
  listSources:
    handler: handlers/sources_handler.list
    timeout: 30
    events:
      - http:
          path: sources
          method: get
          cors: true
          authorizer: 
            name: customAuthorizer
            identitySource: method.request.header.apiKey
  showSource:
    handler: handlers/sources_handler.show
    timeout: 30
    events:
      - http:
          path: sources/{id}
          method: get
          cors: true
          authorizer: 
            name: customAuthorizer
            identitySource: method.request.header.apiKey

  updateSource:
    handler: handlers/sources_handler.update
    timeout: 30
    events:
      - http:
          path: sources/{id}
          method: put
          cors: true
  createSource:
    handler: handlers/sources_handler.create
    timeout: 30
    events:
      - http:
          path: sources
          method: post
          cors: true

  removeSource:
    handler: handlers/sources_handler.remove
    timeout: 30
    events:
      - http:
          path: sources/{id}
          method: delete
          cors: true
  listSubscriptions:
    handler: handlers/subscriptions_handler.list
    timeout: 30
    events:
      - http:
          path: subscriptions
          method: get
          cors: true
  createUser:
    handler: handlers/users_handler.create
    timeout: 30
    events:
      - http:
          path: users
          method: post
          cors: true
  changePassword:
    handler: handlers/users_handler.recover_password
    timeout: 30
    events:
      - http:
          path: users/recover
          method: post
          cors: true
  userMe:
    handler: handlers/users_handler.me
    timeout: 30
    events:
      - http:
          path: users/me
          method: get
          cors: true
  getApiKey:
    handler: handlers/users_handler.get_api_key
    timeout: 30
    events:
      - http:
          path: users/key
          method: get
          cors: true
  getUsage:
    handler: handlers/users_handler.get_usage
    timeout: 30
    events:
      - http:
          path: users/usage
          method: get
          cors: true
  removeUsers:
    handler: handlers/users_handler.remove
    timeout: 30
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
  updateUser:
    handler: handlers/users_handler.update
    timeout: 30
    events:
      - http:
          path: users/{id}
          method: patch
          cors: true
  updateUserPassword:
    handler: handlers/users_handler.change_password
    timeout: 30
    events:
      - http:
          path: users/password
          method: post
          cors: true
  userRegister:
    handler: handlers/users_handler.register
    timeout: 30
    events:
      - http:
          path: users/signin
          method: post
          cors: true
  userLogin:
    handler: handlers/users_handler.login
    timeout: 30
    events:
      - http:
          path: users/login
          method: post
          cors: true
  markArticleAsTweeted:
    handler: handlers/articles_handler.mark_as_tweeted
    timeout: 30
    events:
      - http:
          path: articles/{id}/mark-tweeted
          method: patch
          cors: true
          authorizer:
            name: customAuthorizer
            identitySource: method.request.header.apiKey


  
  customAuthorizer:
    handler: handlers/authorizer_handler.authorize
           
  cognito_post_confirmation:
    handler: handlers/users_handler.post_confirmation
    timeout: 30
  cognito_pre_registraion:
    handler: handlers/users_handler.pre_registration
    timeout: 30

  updateRequestsPerCycle:
    handler: handlers/subscriptions_handler.updateRequestsPerCycle
    timeout: 60
    events:
      - schedule: cron(0 0 * * ? *)


      
useDotenv: true
plugins:
  - serverless-offline
  - serverless-middleware
  - serverless-domain-manager
